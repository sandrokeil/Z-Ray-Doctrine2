<?php
/**
 * Sake
 *
 * @link      http://github.com/sandrokeil/Z-Ray-Doctrine2 for the canonical source repository
 * @copyright Copyright (c) 2015 Sandro Keil
 * @license   http://github.com/sandrokeil/Z-Ray-Doctrine2/blob/master/LICENSE.txt New BSD License
 */

$tableParamsDoctrineQueries = array(
    'tableId' => 'table-doctrine-queries',
    'tableWidth' => '4',
);
?>

<p style="padding:5px 10px">
    This is a list of executed queries with cache information.
    <span id="doctrine2-number-of-queries" style="font-weight: bold"></span> queries were sent to the database server.
    <span id="doctrine2-number-of-cached-queries" style="font-weight: bold"></span> queries were cached.
</p>
<?= $this->zrayTable($tableParamsDoctrineQueries); ?>

<script type="text/javascript">
    (function() {
        var storage = zray.getStorage( 'doctrineQueries' );

        // create main table
        var maintable = zray.createTable( storage, jQuery( '#<?php echo $tableParamsDoctrineQueries['tableId']; ?>' ) );
        maintable.setColumns( [
            {
                "label": "#",
                "propertyName": "queryNumber",
                "sortable": true,
                "width": '5%',
                "tooltip": "Order",
                "getHtml": function( value, record ) {
                    return value;
                }
            },
            {
                "label": "Query",
                "propertyName": "query",
                "sortable": true,
                "width": '55%',
                attributes: { 'class': 'zdb-monospace' },
                "tooltip": "The executed query",
                "getHtml": function( value, record ) {
                    /* this code is from zend server queries component */
                    if ( value.trim() == '' ) {
                        return '<?php echo _t('[Empty query]'); ?>';
                    }

                    var contentWrapper = $zendDevBar( '<div></div>' );

                    var queryDisplayPosition = 0;
                    if ( record.transactionId != -1 ) {
                        if ( value.match( /^BEGIN/i ) ) {
                            queryDisplayPosition = 0;
                            contentWrapper.addClass( 'zdb-querytable-row-transaction-start' );
                        } else if ( value.match( /^COMMIT/i ) || value.match( /^ROLLBACK/i ) ) {
                            queryDisplayPosition = 2;
                            contentWrapper.addClass( 'zdb-querytable-row-transaction-end' );
                        } else {
                            queryDisplayPosition = 1;
                        }
                        contentWrapper.addClass( 'zdb-querytable-row-transaction' );
                    }

                    contentWrapper.attr( 'transactionorder', record.transactionId )
                        .attr( 'transactionpos', queryDisplayPosition );

                    var expandor = zendDevBar.expendedText( value, null, function( sqlCode ) {
                        // highlight sqlCode param. steps:
                        // create element, add it to the doc, highlight its code, get the html and remove elem from the doc
                        var $elem = $zendDevBar( '<span>' ).text( sqlCode );
                        $zendDevBar( 'body' ).append( $elem );
                        if ( window.hljs ) hljs.highlightBlock( $elem.get( 0 ) );
                        var highlighedCodeHtml = $elem.html();
                        $elem.remove();
                        return highlighedCodeHtml;
                    } );

                    if ( typeof expandor != 'string' ) {
                        $zendDevBar( expandor ).on( 'expandingTextChanged', function( event ) {
                            var searchTerm = zendDevBar.getStorage( 'queries' ).searchTerm;
                            $zendDevBar( event.target ).highlight( searchTerm );
                        } );
                    }

                    contentWrapper.html( expandor );
                    return contentWrapper;
                }
            },
            {
                "label": "Number",
                "propertyName": "number",
                "sortable": true,
                "width": '20%',
                "tooltip": "The number of executions e.g. with different parameters",
                "getHtml": function( value, record ) {
                    return value;
                }
            },
            {
                "label": "Cached",
                "propertyName": "cached",
                "sortable": true,
                "width": '20%',
                "tooltip": "The number of cached queries",
                "getHtml": function( value, record ) {
                    return value;
                }
            }
        ] );
        // create main table - end

        // create pager and search
        zray.createPager( storage, jQuery( '#<?php echo $params['pagerId']; ?>' ) );
        zray.createSearch( storage, jQuery( '#<?php echo $params['searchId']; ?>' ), maintable );

        zray.registerDataHandler( 'doctrine2', 'queries', function( extensionData, requestData ) {
            storage.setData( extensionData );

            var realQueries = 0;
            var numberOfQueries = 0;
            var numberOfCachedQueries = 0;

            jQuery.each( extensionData, function( index, value ) {
                    realQueries += value.number - value.cached;
                    numberOfQueries += value.number;
                    numberOfCachedQueries += value.cached;
                }
            );

            jQuery( '#doctrine2-number-of-queries' ).html( realQueries + ' of ' + numberOfQueries );
            jQuery( '#doctrine2-number-of-cached-queries' ).html( numberOfCachedQueries );
        } );
    })();
</script>
